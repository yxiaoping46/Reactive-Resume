version: "3.8"

# In this Docker Compose example, we use Traefik to route requests to the app and storage containers in a secure manner (HTTPS).
# This example assumes you have a domain name (example.com) and a wildcard DNS record pointing to your server.
# The only exposed ports here are from Traefik (80 and 443). All non-secure requests are redirected to HTTPS.
# Note: Please change `example.com` to your domain name where necessary.

services:
  # Storage (for image uploads)
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data
    volumes:
      - minio_data:/data
    environment:
      MINIO_ADDRESS: :9000
      MINIO_CONSOLE_ADDRESS: :9001
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY:-minioadmin}
    labels:
      - traefik.enable=true
      - traefik.http.routers.storage.rule=Host(`storage.example.com`)
      - traefik.http.routers.storage.entrypoints=websecure
      - traefik.http.routers.storage.tls.certresolver=letsencrypt
      - traefik.http.services.storage.loadbalancer.server.port=9000

  # Chrome Browser (for printing and previews)
  chrome:
    image: ghcr.io/browserless/chromium:latest
    restart: unless-stopped
    environment:
      HEALTH: "true"
      TOKEN: ${CHROME_TOKEN:-chrome_token}
      PROXY_HOST: "printer.example.com"
      PROXY_PORT: 443
      PROXY_SSL: "true"
    labels:
      - traefik.enable=true
      - traefik.http.routers.printer.rule=Host(`printer.example.com`)
      - traefik.http.routers.printer.entrypoints=websecure
      - traefik.http.routers.printer.tls.certresolver=letsencrypt
      - traefik.http.services.printer.loadbalancer.server.port=3000

  server:
    image: amruthpillai/reactive-resume:server
    restart: unless-stopped
    depends_on:
      - minio
      - chrome
    environment:
      # Environment
      NODE_ENV: production

      # URLs
      PUBLIC_URL: https://example.com
      STORAGE_URL: https://storage.example.com

      # Chrome Browser
      CHROME_TOKEN: ${CHROME_TOKEN:-chrome_token}
      CHROME_URL: wss://printer.example.com

      # Storage
      STORAGE_ENDPOINT: minio
      STORAGE_PORT: 9000
      STORAGE_REGION: ${STORAGE_REGION:-us-east-1}
      STORAGE_BUCKET: ${STORAGE_BUCKET:-default}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY:-minioadmin}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY:-minioadmin}
      STORAGE_USE_SSL: ${STORAGE_USE_SSL:-false}

      # Authentication Secrets
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}

      # Mail Server
      MAIL_FROM: ${MAIL_FROM:-noreply@example.com}
      SMTP_URL: ${SMTP_URL}

      # Supabase Configuration
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}

      # Feature Flags
      DISABLE_SIGNUPS: ${DISABLE_SIGNUPS:-false}

      # OAuth Providers
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_CALLBACK_URL: https://example.com/api/auth/github/callback

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: https://example.com/api/auth/google/callback

      # OpenID Provider
      VITE_OPENID_NAME: ${VITE_OPENID_NAME}
      OPENID_CLIENT_ID: ${OPENID_CLIENT_ID}
      OPENID_CLIENT_SECRET: ${OPENID_CLIENT_SECRET}
      OPENID_ISSUER: ${OPENID_ISSUER}
      OPENID_AUTHORIZATION_URL: ${OPENID_AUTHORIZATION_URL}
      OPENID_TOKEN_URL: ${OPENID_TOKEN_URL}
      OPENID_USER_INFO_URL: ${OPENID_USER_INFO_URL}
      OPENID_CALLBACK_URL: https://example.com/api/auth/openid/callback
      OPENID_SCOPE: ${OPENID_SCOPE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`example.com`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=3000

  traefik:
    image: traefik
    command:
      - --api=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=noreply@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # Let's Encrypt Staging Server (for testing)
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

      # Redirect all HTTP requests to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  minio_data:
  letsencrypt_data:
